# .github/workflows/deploy-gcp.yml
name: Deploy to Google Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: garage-ai-agents
  REGION: us-central1
  REGISTRY: gcr.io

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run linting
      run: pnpm lint
      
    - name: Run type checking
      run: pnpm tsc --noEmit
      
    - name: Run tests
      run: pnpm test:run
      env:
        NODE_ENV: test

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker
      run: gcloud auth configure-docker
      
    - name: Build Docker image
      run: |
        docker build \
          --tag "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" \
          --tag "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest" \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest" \
          .
          
    - name: Push Docker image
      run: |
        docker push "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        docker push "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest"
        
    - name: Create Service YAML
      run: |
        cat > service.yaml << EOF
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: ${{ env.SERVICE_NAME }}
          labels:
            cloud.googleapis.com/location: ${{ env.REGION }}
        spec:
          template:
            metadata:
              annotations:
                run.googleapis.com/execution-environment: gen2
                run.googleapis.com/startup-cpu-boost: 'true'
                autoscaling.knative.dev/minScale: '1'
                autoscaling.knative.dev/maxScale: '100'
            spec:
              serviceAccountName: ${{ env.SERVICE_NAME }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
              containerConcurrency: 80
              timeoutSeconds: 300
              containers:
              - image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
                resources:
                  limits:
                    cpu: '2'
                    memory: 2Gi
                  requests:
                    cpu: '1'
                    memory: 1Gi
                env:
                - name: NODE_ENV
                  value: production
                - name: GCP_PROJECT_ID
                  value: ${{ env.PROJECT_ID }}
                - name: GCP_LOCATION
                  value: ${{ env.REGION }}
                - name: VERTEX_AI_MODEL
                  value: gemini-2.0-flash-latest
                - name: VERTEX_AI_MAX_TOKENS
                  value: '8192'
                - name: VERTEX_AI_TEMPERATURE
                  value: '0.3'
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: database-url
                      key: latest
                - name: DATABASE_URL_UNPOOLED
                  valueFrom:
                    secretKeyRef:
                      name: database-url-unpooled
                      key: latest
                - name: NEON_PROJECT_ID
                  valueFrom:
                    secretKeyRef:
                      name: neon-project-id
                      key: latest
                - name: BLOB_READ_WRITE_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: blob-token
                      key: latest
                - name: EDGE_CONFIG
                  valueFrom:
                    secretKeyRef:
                      name: edge-config
                      key: latest
                - name: VERCEL_OIDC_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: vercel-oidc-token
                      key: latest
                - name: SUPABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: supabase-url
                      key: latest
                - name: SUPABASE_SERVICE_ROLE_KEY
                  valueFrom:
                    secretKeyRef:
                      name: supabase-service-key
                      key: latest
                - name: NEXT_PUBLIC_SUPABASE_ANON_KEY
                  valueFrom:
                    secretKeyRef:
                      name: supabase-anon-key
                      key: latest
                - name: GOOGLE_AI_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: google-ai-key
                      key: latest
                startupProbe:
                  httpGet:
                    path: /api/health
                    port: 8080
                  initialDelaySeconds: 10
                  periodSeconds: 5
                  timeoutSeconds: 3
                  failureThreshold: 10
                livenessProbe:
                  httpGet:
                    path: /api/health
                    port: 8080
                  periodSeconds: 10
                  timeoutSeconds: 3
                  failureThreshold: 3
        EOF
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run services replace service.yaml \
          --region=${{ env.REGION }} \
          --platform=managed
          
    - name: Allow unauthenticated access
      run: |
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member="allUsers" \
          --role="roles/run.invoker"
          
    - name: Get Service URL
      run: |
        echo "SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_ENV
        
    - name: Run Smoke Tests
      run: |
        echo "Testing service at: ${{ env.SERVICE_URL }}"
        curl -f "${{ env.SERVICE_URL }}/api/health" || exit 1
        
    - name: Create Deployment Summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Service:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "**URL:** ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY

  create-secrets:
    name: Create GCP Secrets (Run Once)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Create Secrets in Secret Manager
      run: |
        # Create secrets if they don't exist
        secrets=(
          "database-url:${{ secrets.DATABASE_URL }}"
          "database-url-unpooled:${{ secrets.DATABASE_URL_UNPOOLED }}"
          "neon-project-id:${{ secrets.NEON_PROJECT_ID }}"
          "blob-token:${{ secrets.BLOB_READ_WRITE_TOKEN }}"
          "edge-config:${{ secrets.EDGE_CONFIG }}"
          "vercel-oidc-token:${{ secrets.VERCEL_OIDC_TOKEN }}"
          "supabase-url:${{ secrets.SUPABASE_URL }}"
          "supabase-service-key:${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          "supabase-anon-key:${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"
          "google-ai-key:${{ secrets.GOOGLE_AI_API_KEY }}"
        )
        
        for secret in "${secrets[@]}"; do
          IFS=':' read -r name value <<< "$secret"
          
          # Check if secret exists
          if ! gcloud secrets describe "$name" --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "Creating secret: $name"
            echo -n "$value" | gcloud secrets create "$name" \
              --data-file=- \
              --project=${{ env.PROJECT_ID }}
          else
            echo "Updating secret: $name"
            echo -n "$value" | gcloud secrets versions add "$name" \
              --data-file=- \
              --project=${{ env.PROJECT_ID }}
          fi
        done
        
    - name: Grant Secret Access to Service Account
      run: |
        SERVICE_ACCOUNT="${{ env.SERVICE_NAME }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com"
        
        secrets=(
          "database-url"
          "database-url-unpooled"
          "neon-project-id"
          "blob-token"
          "edge-config"
          "vercel-oidc-token"
          "supabase-url"
          "supabase-service-key"
          "supabase-anon-key"
          "google-ai-key"
        )
        
        for secret in "${secrets[@]}"; do
          gcloud secrets add-iam-policy-binding "$secret" \
            --member="serviceAccount:${SERVICE_ACCOUNT}" \
            --role="roles/secretmanager.secretAccessor" \
            --project=${{ env.PROJECT_ID }}
        done